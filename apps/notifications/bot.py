import logging
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, MessageHandler, Filters, CallbackQueryHandler, CallbackContext, Updater
from django.conf import settings
from django.db import transaction
from django.contrib.auth.models import User
from apps.accounts.models import UserProfile
from apps.questions.models import Question, Answer
from django.contrib.contenttypes.models import ContentType
from apps.notifications.models import Notification

logger = logging.getLogger(__name__)

bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)

def ustaz_required(func):
    def wrapper(update, context, *args, **kwargs):
        user_id = update.effective_user.id
        try:
            user = User.objects.get(profile__telegram_id=user_id, profile__is_ustaz=True)
            return func(update, context, user, *args, **kwargs)
        except User.DoesNotExist:
            update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —É—Å—Ç–∞–∑–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return None

    return wrapper

def login_required(func):
    def wrapper(update, context, *args, **kwargs):
        user_id = update.effective_user.id
        try:
            user = User.objects.get(profile__telegram_id=user_id)
            return func(update, context, user, *args, **kwargs)
        except User.DoesNotExist:
            update.message.reply_text("–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π Telegram –∫ –∞–∫–∫–∞—É–Ω—Ç—É –Ω–∞ —Å–∞–π—Ç–µ. "
                                      "–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.")
            return None

    return wrapper

def start(update, context):
    username = update.effective_user.username
    first_name = update.effective_user.first_name
    user_id = update.effective_user.id

    welcome_message = f"–ê—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º, {first_name}!\n\n"

    try:
        user = User.objects.get(profile__telegram=username)

        if user.profile.is_ustaz:
            welcome_message += "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—Å—Ç–∞–∑. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö.\n\n"
            welcome_message += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            welcome_message += "/questions - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            welcome_message += "/events - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏\n"
            welcome_message += "/lessons - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É—Ä–æ–∫–∏\n"
        else:
            welcome_message += "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π Telegram –∫ –∞–∫–∫–∞—É–Ω—Ç—É –Ω–∞ —Å–∞–π—Ç–µ.\n"
            welcome_message += "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–æ–≤—ã—Ö —É—Ä–æ–∫–∞—Ö –∏ –≤—Å—Ç—Ä–µ—á–∞—Ö.\n\n"
            welcome_message += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            welcome_message += "/myquestions - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã\n"
            welcome_message += "/events - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏\n"
            welcome_message += "/lessons - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É—Ä–æ–∫–∏\n"

        user.profile.telegram_id = user_id
        user.profile.save()

    except User.DoesNotExist:
        welcome_message += "–í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É –Ω–∞ —Å–∞–π—Ç–µ.\n"
        welcome_message += "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
        welcome_message += "1. –í–æ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç\n"
        welcome_message += "2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, —É–∫–∞–∑–∞–≤ Telegram: @" + str(username) + "\n"

    update.message.reply_text(welcome_message)

@ustaz_required
def list_unanswered_questions(update, context, user):
    questions = Question.objects.filter(is_answered=False).order_by('-created_at')[:5]

    if questions:
        for question in questions:
            keyboard = [
                [InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_{question.id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            from_user = question.user.username if question.user else question.telegram
            message = f"–í–æ–ø—Ä–æ—Å #{question.id} –æ—Ç {from_user}:\n\n{question.clean_content()[:300]}"

            if len(question.clean_content()) > 300:
                message += "...\n\n–ù–∞–∂–º–∏—Ç–µ '–û—Ç–≤–µ—Ç–∏—Ç—å' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."

            update.message.reply_text(message, reply_markup=reply_markup)
    else:
        update.message.reply_text("–ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")


@login_required
def list_my_questions(update, context, user):
    questions = Question.objects.filter(user=user).order_by('-created_at')
    page = context.user_data.get('my_questions_page', 0)
    per_page = 3
    total_pages = (questions.count() + per_page - 1) // per_page
    questions_page = questions[page * per_page:(page + 1) * per_page]

    if not questions.exists():
        update.message.reply_text("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    for i, question in enumerate(questions_page):
        if question.is_answered:
            status_emoji = "‚úÖ"
            status_text = "–û–¢–í–ï–ß–ï–ù"
        else:
            status_emoji = "‚è≥"
            status_text = "–í –û–ñ–ò–î–ê–ù–ò–ò"
        message = f"<b>üî∑ –í–û–ü–†–û–° #{question.id}</b>\n"
        message += f"<i>{status_emoji} –°—Ç–∞—Ç—É—Å: {status_text}</i>\n\n"
        message += f"{question.clean_content()[:200]}"

        if len(question.clean_content()) > 200:
            message += "..."
        keyboard = []
        if question.is_answered:
            keyboard.append([
                InlineKeyboardButton("üìñ –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"show_answer_{question.id}"),
                InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ", url=f"https://al-hanafiyah.com/questions/{question.id}")
            ])
        nav_buttons = []
        if total_pages > 1:
            if page > 0:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ", callback_data="prev_my_questions"))

            nav_buttons.append(InlineKeyboardButton(f"üìÑ {page + 1}/{total_pages}", callback_data="page_info"))

            if page < total_pages - 1:
                nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è", callback_data="next_my_questions"))

        if nav_buttons:
            keyboard.append(nav_buttons)
        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None

        update.message.reply_text(
            message,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    if page == 0 and total_pages > 1:
        nav_help = "‚ö†Ô∏è <i>–£ –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.</i>"
        update.message.reply_text(nav_help, parse_mode='HTML')

def list_events(update, context):
    from django.utils import timezone
    from apps.events.models import OfflineEvent
    events = OfflineEvent.objects.filter(event_date__gte=timezone.now()).order_by('event_date')[:5]

    if events:
        for event in events:
            event_date = event.event_date.strftime('%d.%m.%Y %H:%M') if event.event_date else '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
            message = f"üìÖ <b>{event.title}</b>\n\n"
            message += f"üìÜ –î–∞—Ç–∞: {event_date}\n"
            message += f"üìç –ú–µ—Å—Ç–æ: {event.location}\n\n"
            message += f"‚ÑπÔ∏è {event.description[:200]}..."

            update.message.reply_text(message, parse_mode='HTML')
    else:
        update.message.reply_text("–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")

def list_lessons(update, context):
    from apps.lessons.models import Lesson
    lessons = Lesson.objects.all().order_by('-created_at')[:5]

    if lessons:
        for lesson in lessons:
            message = f"üéì <b>–£—Ä–æ–∫</b>\n\n"
            message += f"üìö –ú–æ–¥—É–ª—å: {lesson.module.name}\n"
            message += f"üìñ –¢–µ–º–∞: {lesson.module.topic.name}\n"
            message += f"üèõ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {lesson.module.topic.category.name}\n"
            message += f"üé¨ –¢–∏–ø: {lesson.get_media_type_display()}\n"

            keyboard = [
                [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —É—Ä–æ–∫", url=f"https://al-hanafiyah.com/lessons/{lesson.slug}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            update.message.reply_text(message, reply_markup=reply_markup, parse_mode='HTML')
    else:
        update.message.reply_text("–£—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

@ustaz_required
def answer_callback(update, context, user):
    query = update.callback_query
    query.answer()

    question_id = query.data.split('_')[1]

    try:
        question = Question.objects.get(id=question_id)

        context.user_data['answering_question'] = question_id
        from_user = question.user.username if question.user else question.telegram
        message = f"–í–æ–ø—Ä–æ—Å #{question.id} –æ—Ç {from_user}:\n\n{question.clean_content()}"
        message += "\n\n–û—Ç–≤–µ—Ç—å—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ."

        query.edit_message_text(message)
    except Question.DoesNotExist:
        query.edit_message_text("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@ustaz_required
def process_answer(update, context, user):
    question_id = context.user_data.get('answering_question')

    if not question_id:
        update.message.reply_text("‚ùóÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —Å–Ω–∞—á–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é /questions")
        return

    try:
        question = Question.objects.get(id=question_id)
        answer_text = update.message.text

        with transaction.atomic():
            answer, created = Answer.objects.update_or_create(
                question=question,
                defaults={'content': answer_text}
            )

            question.is_answered = True
            question.save()

        if question.user and question.user.profile.telegram_id:
            try:
                notification_message = (
                    f"<b>üîî –£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>\n\n"
                    f"–ê—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º! –£—Å—Ç–∞–∑ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n\n"
                    f"<b>üìù –í–ê–® –í–û–ü–†–û–°:</b>\n"
                    f"<i>{question.clean_content()[:150]}...</i>\n\n"
                    f"<b>‚úÖ –û–¢–í–ï–¢ –£–°–¢–ê–ó–ê:</b>\n"
                    f"{answer_text[:200]}...\n\n"
                )

                keyboard = [
                    [InlineKeyboardButton("üìñ –ü—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç",
                                          url=f"https://al-hanafiyah.com/questions/{question.id}")],
                    [
                        InlineKeyboardButton("üëç –ë–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å", callback_data=f"thank_{question.id}"),
                        InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –µ—â—ë", callback_data="ask_new")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                bot.send_message(
                    chat_id=question.user.profile.telegram_id,
                    text=notification_message,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )

                content_type = ContentType.objects.get_for_model(question)
                Notification.objects.create(
                    user=question.user,
                    title="–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å",
                    message=f"–£—Å—Ç–∞–∑ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å: {question.clean_content()[:100]}...",
                    notification_type="question_answer",
                    content_type=content_type,
                    object_id=question.id,
                    url=f"/questions/{question.id}",
                    sent_to_telegram=True
                )

                confirmation = (
                    f"<b>‚úÖ –û–¢–í–ï–¢ –û–¢–ü–†–ê–í–õ–ï–ù</b>\n\n"
                    f"–í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. "
                    f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.\n\n"
                    f"<i>–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤–∞—à —Ç—Ä—É–¥ –æ–∂–∏–¥–∞–µ—Ç –≤–∞—Å —É –ê–ª–ª–∞—Ö–∞</i> üïå"
                )
                update.message.reply_text(confirmation, parse_mode='HTML')

            except Exception as e:
                logger.error(f"Failed to send notification: {e}")
                update.message.reply_text(
                    f"‚ö†Ô∏è <b>–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω</b>, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}",
                    parse_mode='HTML'
                )
        else:
            update.message.reply_text(
                "‚úÖ <b>–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω</b>, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, "
                "—Ç–∞–∫ –∫–∞–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª Telegram –∫ —Å–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.",
                parse_mode='HTML'
            )

        context.user_data.pop('answering_question', None)

    except Question.DoesNotExist:
        update.message.reply_text("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


def run_bot():
    updater = Updater(token=settings.TELEGRAM_BOT_TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("questions", list_unanswered_questions))
    dp.add_handler(CommandHandler("myquestions", list_my_questions))
    dp.add_handler(CommandHandler("events", list_events))
    dp.add_handler(CommandHandler("lessons", list_lessons))
    dp.add_handler(CallbackQueryHandler(answer_callback, pattern=r'^answer_'))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, process_answer))
    updater.start_polling()
    updater.idle()

def start_bot():
    try:
        updater = Updater(token=settings.TELEGRAM_BOT_TOKEN, use_context=True)

        dp = updater.dispatcher
        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CommandHandler("questions", list_unanswered_questions))
        dp.add_handler(CommandHandler("myquestions", list_my_questions))
        dp.add_handler(CommandHandler("events", list_events))
        dp.add_handler(CommandHandler("lessons", list_lessons))
        dp.add_handler(CallbackQueryHandler(answer_callback, pattern=r'^answer_'))
        dp.add_handler(MessageHandler(Filters.text & ~Filters.command, process_answer))
        updater.start_polling(drop_pending_updates=True)
        print("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")